name: Build, Version, & Push EntryTracker

permissions:
  contents: write

on:
  workflow_dispatch:    # allows manual runs
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      # 1. Grab your code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python & install dependencies
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 3. Smoke-test your app via HTTP
      - name: Start app in background
        run: nohup python app.py &

      - name: Smoke-test HTTP
        run: |
          sleep 5
          curl --fail http://localhost:5000/

      # 4. Version bump (patch)
      - name: Bump patch version
        id: bump
        run: |
          CURRENT=$(cat version.txt)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
          PATCH=$((PATCH + 1))
          NEW="${MAJOR}.${MINOR}.${PATCH}"
          echo "$NEW" > version.txt
          echo "new_version=$NEW" >> $GITHUB_OUTPUT

      - name: Commit version bump
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "CI: bump version to ${{ steps.bump.outputs.new_version }}"
          file_pattern: version.txt
          branch: main

      # 5. Package into Docker image with the new version tag
      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ steps.bump.outputs.new_version }} .
             
       # 6. Configure AWS credentials for CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # 7. Authenticate with ECR
      - name: Login to ECR
        run: |
          aws ecr get-login-password \
            --region ${{ secrets.AWS_REGION }} \
          | docker login \
            --username AWS \
            --password-stdin ${{ secrets.ECR_REPOSITORY }}

      # 8. Push the versioned image to ECR
      - name: Push image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ steps.bump.outputs.new_version }}

deploy:
  needs: build-and-push
  runs-on: ubuntu-latest
  steps:
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v0.1.9
      with:
        host:     ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key:      ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          TAG=${{ needs.build-and-push.outputs.new_version }}
          AWS_ECR=${{ secrets.ECR_REPOSITORY }}

          # 1. Login to ECR
          aws ecr get-login-password \
            --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin $AWS_ECR

          # 2. Pull the new web image
          docker pull $AWS_ECR:$TAG

          # 3. Only update the web serviceâ€™s image line
          cd /home/ec2-user
          sed -i "s~image: ${AWS_ECR}:.*~image: ${AWS_ECR}:${TAG}~" docker-compose.yml

          # 4. Re-deploy with Compose
          docker compose pull
          docker compose up -d --remove-orphans

          # 5. Cleanup
          docker image prune -f


            # 5. Cleanup old images
            docker image prune -f
